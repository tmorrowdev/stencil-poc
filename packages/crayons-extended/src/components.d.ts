/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FwCoExport {
        "close": () => Promise<boolean>;
        /**
          * The value to show the modal or close
         */
        "isOpen": boolean;
        "open": () => Promise<boolean>;
        /**
          * The value to populate the export details in json format
         */
        "value": any;
    }
    interface FwCoExportField {
        /**
          * The value to populate the details of the checkbox field
         */
        "value": any;
    }
    interface FwDateCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps": {};
        /**
          * Whether the component have any error.
         */
        "error": boolean;
        "isValid": () => Promise<any>;
        "refresh": () => Promise<any>;
        "setError": (error: any, errorText?: any) => Promise<any>;
        /**
          * Whether to show the error.
         */
        "showError": boolean;
        /**
          * The value of the input
         */
        "value": any;
    }
    interface FwFbFieldDropdown {
        /**
          * variable to store the data source for all the choices
         */
        "dataProvider": any;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading": boolean;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors": boolean;
        "validateErrors": () => Promise<any>;
    }
    interface FwFbFieldDropdownItem {
        /**
          * variable to store the data source
         */
        "dataProvider": any;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading": boolean;
        /**
          * property to determine if this is a new choice or an existing choice
         */
        "isNewChoice": boolean;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors": boolean;
        /**
          * variable to determine if the element is sortable
         */
        "sortable": boolean;
    }
    interface FwFbFieldLookup {
        /**
          * variable to store the data  for all the choices
         */
        "dataResponse": any;
        /**
          * variable to store form values
         */
        "formValues": any;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors": boolean;
        /**
          * source object value
         */
        "sourceObjectName": string;
        /**
          * array for target objects
         */
        "targetObjects": any;
    }
    interface FwFieldEditor {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider": any;
        /**
          * stores the default field type schema for this editor type
         */
        "defaultFieldTypeSchema": any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Disable the repositioning option
         */
        "disabledSort": boolean;
        /**
          * Flag to enable / disable the the filterable option
         */
        "enableFilterable": boolean;
        /**
          * Flag to enable / disable the the unique option
         */
        "enableUnique": boolean;
        /**
          * defines the name of the entity to be used in Lookup field
         */
        "entityName": string;
        /**
          * Property to determine expanded state or collapsed
         */
        "expanded": boolean;
        /**
          * variable to store form values
         */
        "formValues": any;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading": boolean;
        /**
          * defines if the field is primary
         */
        "isPrimaryField": boolean;
        /**
          * object to store the lookup target entities
         */
        "lookupTargetObjects": boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned": 'top' | 'bottom' | '';
    }
    interface FwFieldTypeMenuItem {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider": any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * backgroundcolor for the icon
         */
        "iconBackgroundColor": string;
        /**
          * set the icon path to be used
         */
        "iconName": string;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * Label displayed as header in the card.
         */
        "label": string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * tooltip to be shown on hover
         */
        "tooltip": string;
        /**
          * field type attached to the item which will be broadcasted for adding the field type.
         */
        "value": string;
    }
    interface FwFilter {
        "clearFilter": () => Promise<any>;
        /**
          * The condition schema
         */
        "conditionSchema": {};
        /**
          * Data for the filter ex., { hotel_name: { text: 'Hotel Name', type: 'TEXT' }, hotel_rating: {} }
         */
        "filters": {};
        "getValue": () => Promise<any>;
        "resetFilter": () => Promise<any>;
        /**
          * The value to populate the filters
         */
        "value": any;
    }
    interface FwFilterCondition {
        /**
          * The selected condition
         */
        "condition": any;
        /**
          * The condition schema
         */
        "conditionSchema": {};
        /**
          * The props to be passed to the crayons component
         */
        "controlProps": {};
        /**
          * The column key for the filter.
         */
        "filterOn": any;
        /**
          * The column display name of the filter
         */
        "filterText": {};
        /**
          * An unique identifier for the element.
         */
        "identifier": any;
        "isValid": () => Promise<any>;
        /**
          * The selected condition
         */
        "selectedCondition": any;
        /**
          * The value for the condition
         */
        "value": any;
        /**
          * The value state
         */
        "valueState": any;
    }
    interface FwFilterDropdown {
        /**
          * The filter schema
         */
        "options": any;
        /**
          * The selected value
         */
        "value": any;
    }
    interface FwFormBuilder {
        /**
          * variable to store customize widget fields
         */
        "customizeWidgetFields": any;
        /**
          * svg image to be shown for empty record
         */
        "emptySearchImage": any;
        /**
          * Prop to store the expanded field index
         */
        "expandedFieldIndex": number;
        /**
          * variable to store form values
         */
        "formValues": any;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading": boolean;
        /**
          * flag to notify if an api call to save the widget is completed
         */
        "isSavingCustomizeWidget": boolean;
        /**
          * object to store the lookup target entities
         */
        "lookupTargetObjects": any;
    }
    interface FwInputCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps": {};
        /**
          * Whether the component have any error.
         */
        "error": boolean;
        "isValid": () => Promise<any>;
        "refresh": () => Promise<any>;
        "setError": (error: any, errorText?: any) => Promise<any>;
        /**
          * Whether to show the error.
         */
        "showError": boolean;
        /**
          * The value of the input
         */
        "value": string;
    }
    interface FwInputRangeCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps": {};
        /**
          * Whether the component have any error.
         */
        "error": boolean;
        "isValid": () => Promise<any>;
        /**
          * The value of the input
         */
        "value": any;
    }
    interface FwPlatformTable {
        /**
          * clears the selected rows in the table.
         */
        "clearTableSelection": () => Promise<void>;
        /**
          * Whether the checkbox should be visible.
         */
        "isSelectable": boolean;
        /**
          * The sort order.
         */
        "loading": boolean;
        /**
          * The sort order.
         */
        "order": any;
        /**
          * The sort by column key.
         */
        "orderBy": any;
        /**
          * Props for the fw-pagination component
         */
        "paginationProps": {};
        /**
          * When set true the error state slot will be shown.
         */
        "showError": boolean;
        /**
          * The sortable columns object.
         */
        "sortableColumns": {};
        /**
          * Props for the fw-pagination component
         */
        "tableProps": {};
    }
    interface FwSearchDropdown {
        /**
          * The filter schema
         */
        "options": any;
    }
    interface FwSelectCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps": {};
        /**
          * Whether the component have any error.
         */
        "error": boolean;
        "isValid": () => Promise<any>;
        "refresh": () => Promise<any>;
        "setError": (error: any, errorText?: any) => Promise<any>;
        /**
          * Whether to show the error.
         */
        "showError": boolean;
        /**
          * The value of the input
         */
        "value": any;
    }
    interface FwSortSelect {
        /**
          * The sort order.
         */
        "order": any;
        /**
          * The sort by column key.
         */
        "orderBy": any;
        /**
          * Select options for the sortable. Array of objects of type {text: string, value: string}
         */
        "sortOptions": any[];
    }
    interface FwWidgetCustomizeFieldItem {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider": any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * index attached inside the parent group component
         */
        "index": number;
        /**
          * defines if the field is primary
         */
        "isPrimaryField": boolean;
        /**
          * Label displayed as header in the card.
         */
        "label": string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name": string;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned": 'top' | 'bottom' | '';
        /**
          * selected property of the component
         */
        "selected": boolean;
    }
}
export interface FwCoExportCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwCoExportElement;
}
export interface FwCoExportFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwCoExportFieldElement;
}
export interface FwFbFieldDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFbFieldDropdownElement;
}
export interface FwFbFieldDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFbFieldDropdownItemElement;
}
export interface FwFbFieldLookupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFbFieldLookupElement;
}
export interface FwFieldEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFieldEditorElement;
}
export interface FwFieldTypeMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFieldTypeMenuItemElement;
}
export interface FwFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFilterElement;
}
export interface FwFilterConditionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFilterConditionElement;
}
export interface FwFormBuilderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwFormBuilderElement;
}
export interface FwInputRangeConditionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwInputRangeConditionElement;
}
export interface FwPlatformTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwPlatformTableElement;
}
export interface FwSearchDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwSearchDropdownElement;
}
export interface FwSortSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwSortSelectElement;
}
export interface FwWidgetCustomizeFieldItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFwWidgetCustomizeFieldItemElement;
}
declare global {
    interface HTMLFwCoExportElement extends Components.FwCoExport, HTMLStencilElement {
    }
    var HTMLFwCoExportElement: {
        prototype: HTMLFwCoExportElement;
        new (): HTMLFwCoExportElement;
    };
    interface HTMLFwCoExportFieldElement extends Components.FwCoExportField, HTMLStencilElement {
    }
    var HTMLFwCoExportFieldElement: {
        prototype: HTMLFwCoExportFieldElement;
        new (): HTMLFwCoExportFieldElement;
    };
    interface HTMLFwDateConditionElement extends Components.FwDateCondition, HTMLStencilElement {
    }
    var HTMLFwDateConditionElement: {
        prototype: HTMLFwDateConditionElement;
        new (): HTMLFwDateConditionElement;
    };
    interface HTMLFwFbFieldDropdownElement extends Components.FwFbFieldDropdown, HTMLStencilElement {
    }
    var HTMLFwFbFieldDropdownElement: {
        prototype: HTMLFwFbFieldDropdownElement;
        new (): HTMLFwFbFieldDropdownElement;
    };
    interface HTMLFwFbFieldDropdownItemElement extends Components.FwFbFieldDropdownItem, HTMLStencilElement {
    }
    var HTMLFwFbFieldDropdownItemElement: {
        prototype: HTMLFwFbFieldDropdownItemElement;
        new (): HTMLFwFbFieldDropdownItemElement;
    };
    interface HTMLFwFbFieldLookupElement extends Components.FwFbFieldLookup, HTMLStencilElement {
    }
    var HTMLFwFbFieldLookupElement: {
        prototype: HTMLFwFbFieldLookupElement;
        new (): HTMLFwFbFieldLookupElement;
    };
    interface HTMLFwFieldEditorElement extends Components.FwFieldEditor, HTMLStencilElement {
    }
    var HTMLFwFieldEditorElement: {
        prototype: HTMLFwFieldEditorElement;
        new (): HTMLFwFieldEditorElement;
    };
    interface HTMLFwFieldTypeMenuItemElement extends Components.FwFieldTypeMenuItem, HTMLStencilElement {
    }
    var HTMLFwFieldTypeMenuItemElement: {
        prototype: HTMLFwFieldTypeMenuItemElement;
        new (): HTMLFwFieldTypeMenuItemElement;
    };
    interface HTMLFwFilterElement extends Components.FwFilter, HTMLStencilElement {
    }
    var HTMLFwFilterElement: {
        prototype: HTMLFwFilterElement;
        new (): HTMLFwFilterElement;
    };
    interface HTMLFwFilterConditionElement extends Components.FwFilterCondition, HTMLStencilElement {
    }
    var HTMLFwFilterConditionElement: {
        prototype: HTMLFwFilterConditionElement;
        new (): HTMLFwFilterConditionElement;
    };
    interface HTMLFwFilterDropdownElement extends Components.FwFilterDropdown, HTMLStencilElement {
    }
    var HTMLFwFilterDropdownElement: {
        prototype: HTMLFwFilterDropdownElement;
        new (): HTMLFwFilterDropdownElement;
    };
    interface HTMLFwFormBuilderElement extends Components.FwFormBuilder, HTMLStencilElement {
    }
    var HTMLFwFormBuilderElement: {
        prototype: HTMLFwFormBuilderElement;
        new (): HTMLFwFormBuilderElement;
    };
    interface HTMLFwInputConditionElement extends Components.FwInputCondition, HTMLStencilElement {
    }
    var HTMLFwInputConditionElement: {
        prototype: HTMLFwInputConditionElement;
        new (): HTMLFwInputConditionElement;
    };
    interface HTMLFwInputRangeConditionElement extends Components.FwInputRangeCondition, HTMLStencilElement {
    }
    var HTMLFwInputRangeConditionElement: {
        prototype: HTMLFwInputRangeConditionElement;
        new (): HTMLFwInputRangeConditionElement;
    };
    interface HTMLFwPlatformTableElement extends Components.FwPlatformTable, HTMLStencilElement {
    }
    var HTMLFwPlatformTableElement: {
        prototype: HTMLFwPlatformTableElement;
        new (): HTMLFwPlatformTableElement;
    };
    interface HTMLFwSearchDropdownElement extends Components.FwSearchDropdown, HTMLStencilElement {
    }
    var HTMLFwSearchDropdownElement: {
        prototype: HTMLFwSearchDropdownElement;
        new (): HTMLFwSearchDropdownElement;
    };
    interface HTMLFwSelectConditionElement extends Components.FwSelectCondition, HTMLStencilElement {
    }
    var HTMLFwSelectConditionElement: {
        prototype: HTMLFwSelectConditionElement;
        new (): HTMLFwSelectConditionElement;
    };
    interface HTMLFwSortSelectElement extends Components.FwSortSelect, HTMLStencilElement {
    }
    var HTMLFwSortSelectElement: {
        prototype: HTMLFwSortSelectElement;
        new (): HTMLFwSortSelectElement;
    };
    interface HTMLFwWidgetCustomizeFieldItemElement extends Components.FwWidgetCustomizeFieldItem, HTMLStencilElement {
    }
    var HTMLFwWidgetCustomizeFieldItemElement: {
        prototype: HTMLFwWidgetCustomizeFieldItemElement;
        new (): HTMLFwWidgetCustomizeFieldItemElement;
    };
    interface HTMLElementTagNameMap {
        "fw-co-export": HTMLFwCoExportElement;
        "fw-co-export-field": HTMLFwCoExportFieldElement;
        "fw-date-condition": HTMLFwDateConditionElement;
        "fw-fb-field-dropdown": HTMLFwFbFieldDropdownElement;
        "fw-fb-field-dropdown-item": HTMLFwFbFieldDropdownItemElement;
        "fw-fb-field-lookup": HTMLFwFbFieldLookupElement;
        "fw-field-editor": HTMLFwFieldEditorElement;
        "fw-field-type-menu-item": HTMLFwFieldTypeMenuItemElement;
        "fw-filter": HTMLFwFilterElement;
        "fw-filter-condition": HTMLFwFilterConditionElement;
        "fw-filter-dropdown": HTMLFwFilterDropdownElement;
        "fw-form-builder": HTMLFwFormBuilderElement;
        "fw-input-condition": HTMLFwInputConditionElement;
        "fw-input-range-condition": HTMLFwInputRangeConditionElement;
        "fw-platform-table": HTMLFwPlatformTableElement;
        "fw-search-dropdown": HTMLFwSearchDropdownElement;
        "fw-select-condition": HTMLFwSelectConditionElement;
        "fw-sort-select": HTMLFwSortSelectElement;
        "fw-widget-customize-field-item": HTMLFwWidgetCustomizeFieldItemElement;
    }
}
declare namespace LocalJSX {
    interface FwCoExport {
        /**
          * The value to show the modal or close
         */
        "isOpen"?: boolean;
        /**
          * Triggered whenever the cancel/close button is selected
         */
        "onFwCloseExport"?: (event: FwCoExportCustomEvent<any>) => void;
        /**
          * Triggered whenever the export button is selected
         */
        "onFwExport"?: (event: FwCoExportCustomEvent<any>) => void;
        /**
          * The value to populate the export details in json format
         */
        "value"?: any;
    }
    interface FwCoExportField {
        /**
          * Triggered whenever the export button is selected
         */
        "onFwChange"?: (event: FwCoExportFieldCustomEvent<any>) => void;
        /**
          * The value to populate the details of the checkbox field
         */
        "value"?: any;
    }
    interface FwDateCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps"?: {};
        /**
          * Whether the component have any error.
         */
        "error"?: boolean;
        /**
          * Whether to show the error.
         */
        "showError"?: boolean;
        /**
          * The value of the input
         */
        "value"?: any;
    }
    interface FwFbFieldDropdown {
        /**
          * variable to store the data source for all the choices
         */
        "dataProvider"?: any;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading"?: boolean;
        /**
          * Triggered on data change for error handling on parent
         */
        "onFwChange"?: (event: FwFbFieldDropdownCustomEvent<any>) => void;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors"?: boolean;
    }
    interface FwFbFieldDropdownItem {
        /**
          * variable to store the data source
         */
        "dataProvider"?: any;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading"?: boolean;
        /**
          * property to determine if this is a new choice or an existing choice
         */
        "isNewChoice"?: boolean;
        /**
          * Triggered on choice input blur
         */
        "onFwChange"?: (event: FwFbFieldDropdownItemCustomEvent<any>) => void;
        /**
          * Triggered on delete button click
         */
        "onFwDelete"?: (event: FwFbFieldDropdownItemCustomEvent<any>) => void;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors"?: boolean;
        /**
          * variable to determine if the element is sortable
         */
        "sortable"?: boolean;
    }
    interface FwFbFieldLookup {
        /**
          * variable to store the data  for all the choices
         */
        "dataResponse"?: any;
        /**
          * variable to store form values
         */
        "formValues"?: any;
        /**
          * Triggered on data change for error handling on parent
         */
        "onFwChange"?: (event: FwFbFieldLookupCustomEvent<any>) => void;
        /**
          * property to show the errors on click of the save/add button from the parent
         */
        "showErrors"?: boolean;
        /**
          * source object value
         */
        "sourceObjectName"?: string;
        /**
          * array for target objects
         */
        "targetObjects"?: any;
    }
    interface FwFieldEditor {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider"?: any;
        /**
          * stores the default field type schema for this editor type
         */
        "defaultFieldTypeSchema"?: any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Disable the repositioning option
         */
        "disabledSort"?: boolean;
        /**
          * Flag to enable / disable the the filterable option
         */
        "enableFilterable"?: boolean;
        /**
          * Flag to enable / disable the the unique option
         */
        "enableUnique"?: boolean;
        /**
          * defines the name of the entity to be used in Lookup field
         */
        "entityName"?: string;
        /**
          * Property to determine expanded state or collapsed
         */
        "expanded"?: boolean;
        /**
          * variable to store form values
         */
        "formValues"?: any;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading"?: boolean;
        /**
          * defines if the field is primary
         */
        "isPrimaryField"?: boolean;
        /**
          * object to store the lookup target entities
         */
        "lookupTargetObjects"?: boolean;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the field has to be deleted on the server
         */
        "onFwDelete"?: (event: FwFieldEditorCustomEvent<any>) => void;
        /**
          * Triggered when the field is expanded or collapsed
         */
        "onFwExpand"?: (event: FwFieldEditorCustomEvent<any>) => void;
        /**
          * Triggered when the field details need to be saved on the server
         */
        "onFwUpdate"?: (event: FwFieldEditorCustomEvent<any>) => void;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned"?: 'top' | 'bottom' | '';
    }
    interface FwFieldTypeMenuItem {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider"?: any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * backgroundcolor for the icon
         */
        "iconBackgroundColor"?: string;
        /**
          * set the icon path to be used
         */
        "iconName"?: string;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * Label displayed as header in the card.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the the add button is clicked.
         */
        "onFwAddClick"?: (event: FwFieldTypeMenuItemCustomEvent<any>) => void;
        /**
          * tooltip to be shown on hover
         */
        "tooltip"?: string;
        /**
          * field type attached to the item which will be broadcasted for adding the field type.
         */
        "value"?: string;
    }
    interface FwFilter {
        /**
          * The condition schema
         */
        "conditionSchema"?: {};
        /**
          * Data for the filter ex., { hotel_name: { text: 'Hotel Name', type: 'TEXT' }, hotel_rating: {} }
         */
        "filters"?: {};
        /**
          * Triggered whenever the user selects/removes a filter option.
         */
        "onFwFilterChange"?: (event: FwFilterCustomEvent<any>) => void;
        /**
          * The value to populate the filters
         */
        "value"?: any;
    }
    interface FwFilterCondition {
        /**
          * The selected condition
         */
        "condition"?: any;
        /**
          * The condition schema
         */
        "conditionSchema"?: {};
        /**
          * The props to be passed to the crayons component
         */
        "controlProps"?: {};
        /**
          * The column key for the filter.
         */
        "filterOn"?: any;
        /**
          * The column display name of the filter
         */
        "filterText"?: {};
        /**
          * An unique identifier for the element.
         */
        "identifier"?: any;
        /**
          * Event Triggered on deleting an filter condition
         */
        "onFwDelete"?: (event: FwFilterConditionCustomEvent<any>) => void;
        /**
          * The selected condition
         */
        "selectedCondition"?: any;
        /**
          * The value for the condition
         */
        "value"?: any;
        /**
          * The value state
         */
        "valueState"?: any;
    }
    interface FwFilterDropdown {
        /**
          * The filter schema
         */
        "options"?: any;
        /**
          * The selected value
         */
        "value"?: any;
    }
    interface FwFormBuilder {
        /**
          * variable to store customize widget fields
         */
        "customizeWidgetFields"?: any;
        /**
          * svg image to be shown for empty record
         */
        "emptySearchImage"?: any;
        /**
          * Prop to store the expanded field index
         */
        "expandedFieldIndex"?: number;
        /**
          * variable to store form values
         */
        "formValues"?: any;
        /**
          * flag to notify if an api call is in progress
         */
        "isLoading"?: boolean;
        /**
          * flag to notify if an api call to save the widget is completed
         */
        "isSavingCustomizeWidget"?: boolean;
        /**
          * object to store the lookup target entities
         */
        "lookupTargetObjects"?: any;
        /**
          * Triggered when a new field type is dropped / added inside the fields area
         */
        "onFwComposeNewField"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered on Delete field button click from the field list items
         */
        "onFwDeleteField"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered when the field is expanded or collapsed
         */
        "onFwExpandField"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered when the position of a field is changed using drag and drop
         */
        "onFwRepositionField"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered on Add/Save field button click from the field list items
         */
        "onFwSaveField"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered on saving the widget fields
         */
        "onFwSaveWidgetFields"?: (event: FwFormBuilderCustomEvent<any>) => void;
        /**
          * Triggered on search
         */
        "onFwSearchField"?: (event: FwFormBuilderCustomEvent<any>) => void;
    }
    interface FwInputCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps"?: {};
        /**
          * Whether the component have any error.
         */
        "error"?: boolean;
        /**
          * Whether to show the error.
         */
        "showError"?: boolean;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    interface FwInputRangeCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps"?: {};
        /**
          * Whether the component have any error.
         */
        "error"?: boolean;
        /**
          * Triggered when the value in the input box is modified.
         */
        "onFwInput"?: (event: FwInputRangeConditionCustomEvent<any>) => void;
        /**
          * The value of the input
         */
        "value"?: any;
    }
    interface FwPlatformTable {
        /**
          * Whether the checkbox should be visible.
         */
        "isSelectable"?: boolean;
        /**
          * The sort order.
         */
        "loading"?: boolean;
        /**
          * Triggered on selecting the sort option.
         */
        "onFwDelete"?: (event: FwPlatformTableCustomEvent<any>) => void;
        /**
          * Triggered on page navigation button click.
         */
        "onFwPagination"?: (event: FwPlatformTableCustomEvent<any>) => void;
        /**
          * The sort order.
         */
        "order"?: any;
        /**
          * The sort by column key.
         */
        "orderBy"?: any;
        /**
          * Props for the fw-pagination component
         */
        "paginationProps"?: {};
        /**
          * When set true the error state slot will be shown.
         */
        "showError"?: boolean;
        /**
          * The sortable columns object.
         */
        "sortableColumns"?: {};
        /**
          * Props for the fw-pagination component
         */
        "tableProps"?: {};
    }
    interface FwSearchDropdown {
        /**
          * On Change event
         */
        "onFwChange"?: (event: FwSearchDropdownCustomEvent<any>) => void;
        /**
          * The filter schema
         */
        "options"?: any;
    }
    interface FwSelectCondition {
        /**
          * The props to be passed to the crayons component.
         */
        "controlProps"?: {};
        /**
          * Whether the component have any error.
         */
        "error"?: boolean;
        /**
          * Whether to show the error.
         */
        "showError"?: boolean;
        /**
          * The value of the input
         */
        "value"?: any;
    }
    interface FwSortSelect {
        /**
          * Triggered on selecting the sort option.
         */
        "onFwSort"?: (event: FwSortSelectCustomEvent<any>) => void;
        /**
          * The sort order.
         */
        "order"?: any;
        /**
          * The sort by column key.
         */
        "orderBy"?: any;
        /**
          * Select options for the sortable. Array of objects of type {text: string, value: string}
         */
        "sortOptions"?: any[];
    }
    interface FwWidgetCustomizeFieldItem {
        /**
          * data source used to set and edit the field values
         */
        "dataProvider"?: any;
        /**
          * Disables the component on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * index attached inside the parent group component
         */
        "index"?: number;
        /**
          * defines if the field is primary
         */
        "isPrimaryField"?: boolean;
        /**
          * Label displayed as header in the card.
         */
        "label"?: string;
        /**
          * Name of the component, saved as part of the form data.
         */
        "name"?: string;
        /**
          * Triggered when the card in focus is selected.
         */
        "onFwCheck"?: (event: FwWidgetCustomizeFieldItemCustomEvent<any>) => void;
        /**
          * Pinned position of the drag item, other drag item cannot be placed above or below it.
         */
        "pinned"?: 'top' | 'bottom' | '';
        /**
          * selected property of the component
         */
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "fw-co-export": FwCoExport;
        "fw-co-export-field": FwCoExportField;
        "fw-date-condition": FwDateCondition;
        "fw-fb-field-dropdown": FwFbFieldDropdown;
        "fw-fb-field-dropdown-item": FwFbFieldDropdownItem;
        "fw-fb-field-lookup": FwFbFieldLookup;
        "fw-field-editor": FwFieldEditor;
        "fw-field-type-menu-item": FwFieldTypeMenuItem;
        "fw-filter": FwFilter;
        "fw-filter-condition": FwFilterCondition;
        "fw-filter-dropdown": FwFilterDropdown;
        "fw-form-builder": FwFormBuilder;
        "fw-input-condition": FwInputCondition;
        "fw-input-range-condition": FwInputRangeCondition;
        "fw-platform-table": FwPlatformTable;
        "fw-search-dropdown": FwSearchDropdown;
        "fw-select-condition": FwSelectCondition;
        "fw-sort-select": FwSortSelect;
        "fw-widget-customize-field-item": FwWidgetCustomizeFieldItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fw-co-export": LocalJSX.FwCoExport & JSXBase.HTMLAttributes<HTMLFwCoExportElement>;
            "fw-co-export-field": LocalJSX.FwCoExportField & JSXBase.HTMLAttributes<HTMLFwCoExportFieldElement>;
            "fw-date-condition": LocalJSX.FwDateCondition & JSXBase.HTMLAttributes<HTMLFwDateConditionElement>;
            "fw-fb-field-dropdown": LocalJSX.FwFbFieldDropdown & JSXBase.HTMLAttributes<HTMLFwFbFieldDropdownElement>;
            "fw-fb-field-dropdown-item": LocalJSX.FwFbFieldDropdownItem & JSXBase.HTMLAttributes<HTMLFwFbFieldDropdownItemElement>;
            "fw-fb-field-lookup": LocalJSX.FwFbFieldLookup & JSXBase.HTMLAttributes<HTMLFwFbFieldLookupElement>;
            "fw-field-editor": LocalJSX.FwFieldEditor & JSXBase.HTMLAttributes<HTMLFwFieldEditorElement>;
            "fw-field-type-menu-item": LocalJSX.FwFieldTypeMenuItem & JSXBase.HTMLAttributes<HTMLFwFieldTypeMenuItemElement>;
            "fw-filter": LocalJSX.FwFilter & JSXBase.HTMLAttributes<HTMLFwFilterElement>;
            "fw-filter-condition": LocalJSX.FwFilterCondition & JSXBase.HTMLAttributes<HTMLFwFilterConditionElement>;
            "fw-filter-dropdown": LocalJSX.FwFilterDropdown & JSXBase.HTMLAttributes<HTMLFwFilterDropdownElement>;
            "fw-form-builder": LocalJSX.FwFormBuilder & JSXBase.HTMLAttributes<HTMLFwFormBuilderElement>;
            "fw-input-condition": LocalJSX.FwInputCondition & JSXBase.HTMLAttributes<HTMLFwInputConditionElement>;
            "fw-input-range-condition": LocalJSX.FwInputRangeCondition & JSXBase.HTMLAttributes<HTMLFwInputRangeConditionElement>;
            "fw-platform-table": LocalJSX.FwPlatformTable & JSXBase.HTMLAttributes<HTMLFwPlatformTableElement>;
            "fw-search-dropdown": LocalJSX.FwSearchDropdown & JSXBase.HTMLAttributes<HTMLFwSearchDropdownElement>;
            "fw-select-condition": LocalJSX.FwSelectCondition & JSXBase.HTMLAttributes<HTMLFwSelectConditionElement>;
            "fw-sort-select": LocalJSX.FwSortSelect & JSXBase.HTMLAttributes<HTMLFwSortSelectElement>;
            "fw-widget-customize-field-item": LocalJSX.FwWidgetCustomizeFieldItem & JSXBase.HTMLAttributes<HTMLFwWidgetCustomizeFieldItemElement>;
        }
    }
}
