/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DsAccordion {
        "buttonLabel": string;
        "description": string;
    }
    interface DsButton {
        "disabled": boolean;
        "label": string;
        /**
          * Choose the size of the button
         */
        "size": 'small' | 'large';
        /**
          * Which type of button to render
         */
        "type": 'primary' | 'secondary' | 'tertiary' | 'emphasized';
        /**
          * Whether the button has fixed or autosized with
         */
        "width": 'auto' | 'full';
    }
    interface DsCard {
        "cardTitle": string;
        "subtitle": string;
    }
    interface DsIcon {
        "color": string;
        "name": string;
        "size": string;
    }
    interface DsInput {
    }
    interface DsTable {
        "headers": string[];
    }
}
export interface DsAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsAccordionElement;
}
declare global {
    interface HTMLDsAccordionElement extends Components.DsAccordion, HTMLStencilElement {
    }
    var HTMLDsAccordionElement: {
        prototype: HTMLDsAccordionElement;
        new (): HTMLDsAccordionElement;
    };
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsCardElement extends Components.DsCard, HTMLStencilElement {
    }
    var HTMLDsCardElement: {
        prototype: HTMLDsCardElement;
        new (): HTMLDsCardElement;
    };
    interface HTMLDsIconElement extends Components.DsIcon, HTMLStencilElement {
    }
    var HTMLDsIconElement: {
        prototype: HTMLDsIconElement;
        new (): HTMLDsIconElement;
    };
    interface HTMLDsInputElement extends Components.DsInput, HTMLStencilElement {
    }
    var HTMLDsInputElement: {
        prototype: HTMLDsInputElement;
        new (): HTMLDsInputElement;
    };
    interface HTMLDsTableElement extends Components.DsTable, HTMLStencilElement {
    }
    var HTMLDsTableElement: {
        prototype: HTMLDsTableElement;
        new (): HTMLDsTableElement;
    };
    interface HTMLElementTagNameMap {
        "ds-accordion": HTMLDsAccordionElement;
        "ds-button": HTMLDsButtonElement;
        "ds-card": HTMLDsCardElement;
        "ds-icon": HTMLDsIconElement;
        "ds-input": HTMLDsInputElement;
        "ds-table": HTMLDsTableElement;
    }
}
declare namespace LocalJSX {
    interface DsAccordion {
        "buttonLabel"?: string;
        "description"?: string;
        "onToggle"?: (event: DsAccordionCustomEvent<unknown>) => void;
    }
    interface DsButton {
        "disabled"?: boolean;
        "label"?: string;
        /**
          * Choose the size of the button
         */
        "size"?: 'small' | 'large';
        /**
          * Which type of button to render
         */
        "type"?: 'primary' | 'secondary' | 'tertiary' | 'emphasized';
        /**
          * Whether the button has fixed or autosized with
         */
        "width"?: 'auto' | 'full';
    }
    interface DsCard {
        "cardTitle"?: string;
        "subtitle"?: string;
    }
    interface DsIcon {
        "color"?: string;
        "name"?: string;
        "size"?: string;
    }
    interface DsInput {
    }
    interface DsTable {
        "headers"?: string[];
    }
    interface IntrinsicElements {
        "ds-accordion": DsAccordion;
        "ds-button": DsButton;
        "ds-card": DsCard;
        "ds-icon": DsIcon;
        "ds-input": DsInput;
        "ds-table": DsTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-accordion": LocalJSX.DsAccordion & JSXBase.HTMLAttributes<HTMLDsAccordionElement>;
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-card": LocalJSX.DsCard & JSXBase.HTMLAttributes<HTMLDsCardElement>;
            "ds-icon": LocalJSX.DsIcon & JSXBase.HTMLAttributes<HTMLDsIconElement>;
            "ds-input": LocalJSX.DsInput & JSXBase.HTMLAttributes<HTMLDsInputElement>;
            "ds-table": LocalJSX.DsTable & JSXBase.HTMLAttributes<HTMLDsTableElement>;
        }
    }
}
